// Code generated by mockery v2.8.0. DO NOT EDIT.

package mock

import (
	context "context"

	model "github.com/MuZaZaVr/account-service/internal/model"
	mock "github.com/stretchr/testify/mock"

	request "github.com/MuZaZaVr/account-service/internal/model/request"
)

// Account is an autogenerated mock type for the Account type
type Account struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, req
func (_m *Account) Create(ctx context.Context, req request.CreateAccountRequest) (string, error) {
	ret := _m.Called(ctx, req)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, request.CreateAccountRequest) string); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, request.CreateAccountRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, req
func (_m *Account) Delete(ctx context.Context, req request.DeleteAccountRequest) (string, error) {
	ret := _m.Called(ctx, req)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, request.DeleteAccountRequest) string); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, request.DeleteAccountRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAccountsByCredentialsAddress provides a mock function with given fields: ctx, req
func (_m *Account) FindAccountsByCredentialsAddress(ctx context.Context, req request.FindAccountsByCredentialAddressRequest) ([]model.AccountDTO, error) {
	ret := _m.Called(ctx, req)

	var r0 []model.AccountDTO
	if rf, ok := ret.Get(0).(func(context.Context, request.FindAccountsByCredentialAddressRequest) []model.AccountDTO); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.AccountDTO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, request.FindAccountsByCredentialAddressRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAccountsByCredentialsAge provides a mock function with given fields: ctx, req
func (_m *Account) FindAccountsByCredentialsAge(ctx context.Context, req request.FindAccountsByCredentialAgeRequest) ([]model.AccountDTO, error) {
	ret := _m.Called(ctx, req)

	var r0 []model.AccountDTO
	if rf, ok := ret.Get(0).(func(context.Context, request.FindAccountsByCredentialAgeRequest) []model.AccountDTO); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.AccountDTO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, request.FindAccountsByCredentialAgeRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAccountsByCredentialsCity provides a mock function with given fields: ctx, req
func (_m *Account) FindAccountsByCredentialsCity(ctx context.Context, req request.FindAccountsByCredentialCityRequest) ([]model.AccountDTO, error) {
	ret := _m.Called(ctx, req)

	var r0 []model.AccountDTO
	if rf, ok := ret.Get(0).(func(context.Context, request.FindAccountsByCredentialCityRequest) []model.AccountDTO); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.AccountDTO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, request.FindAccountsByCredentialCityRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAccountsByCredentialsEmail provides a mock function with given fields: ctx, req
func (_m *Account) FindAccountsByCredentialsEmail(ctx context.Context, req request.FindAccountsByCredentialEmailRequest) ([]model.AccountDTO, error) {
	ret := _m.Called(ctx, req)

	var r0 []model.AccountDTO
	if rf, ok := ret.Get(0).(func(context.Context, request.FindAccountsByCredentialEmailRequest) []model.AccountDTO); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.AccountDTO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, request.FindAccountsByCredentialEmailRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAccountsByCredentialsLogin provides a mock function with given fields: ctx, req
func (_m *Account) FindAccountsByCredentialsLogin(ctx context.Context, req request.FindAccountsByCredentialLoginRequest) ([]model.AccountDTO, error) {
	ret := _m.Called(ctx, req)

	var r0 []model.AccountDTO
	if rf, ok := ret.Get(0).(func(context.Context, request.FindAccountsByCredentialLoginRequest) []model.AccountDTO); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.AccountDTO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, request.FindAccountsByCredentialLoginRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAccountsByCredentialsMiddlename provides a mock function with given fields: ctx, req
func (_m *Account) FindAccountsByCredentialsMiddlename(ctx context.Context, req request.FindAccountsByCredentialMiddlenameRequest) ([]model.AccountDTO, error) {
	ret := _m.Called(ctx, req)

	var r0 []model.AccountDTO
	if rf, ok := ret.Get(0).(func(context.Context, request.FindAccountsByCredentialMiddlenameRequest) []model.AccountDTO); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.AccountDTO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, request.FindAccountsByCredentialMiddlenameRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAccountsByCredentialsName provides a mock function with given fields: ctx, req
func (_m *Account) FindAccountsByCredentialsName(ctx context.Context, req request.FindAccountsByCredentialNameRequest) ([]model.AccountDTO, error) {
	ret := _m.Called(ctx, req)

	var r0 []model.AccountDTO
	if rf, ok := ret.Get(0).(func(context.Context, request.FindAccountsByCredentialNameRequest) []model.AccountDTO); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.AccountDTO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, request.FindAccountsByCredentialNameRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAccountsByCredentialsPhone provides a mock function with given fields: ctx, req
func (_m *Account) FindAccountsByCredentialsPhone(ctx context.Context, req request.FindAccountsByCredentialPhoneRequest) ([]model.AccountDTO, error) {
	ret := _m.Called(ctx, req)

	var r0 []model.AccountDTO
	if rf, ok := ret.Get(0).(func(context.Context, request.FindAccountsByCredentialPhoneRequest) []model.AccountDTO); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.AccountDTO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, request.FindAccountsByCredentialPhoneRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAccountsByCredentialsSurname provides a mock function with given fields: ctx, req
func (_m *Account) FindAccountsByCredentialsSurname(ctx context.Context, req request.FindAccountsByCredentialSurnameRequest) ([]model.AccountDTO, error) {
	ret := _m.Called(ctx, req)

	var r0 []model.AccountDTO
	if rf, ok := ret.Get(0).(func(context.Context, request.FindAccountsByCredentialSurnameRequest) []model.AccountDTO); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.AccountDTO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, request.FindAccountsByCredentialSurnameRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAccountsByUserID provides a mock function with given fields: ctx, req
func (_m *Account) FindAccountsByUserID(ctx context.Context, req request.FindAllAccountsByUserIDRequest) ([]model.AccountDTO, error) {
	ret := _m.Called(ctx, req)

	var r0 []model.AccountDTO
	if rf, ok := ret.Get(0).(func(context.Context, request.FindAllAccountsByUserIDRequest) []model.AccountDTO); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.AccountDTO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, request.FindAllAccountsByUserIDRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByName provides a mock function with given fields: ctx, req
func (_m *Account) FindByName(ctx context.Context, req request.FindAccountByNameRequest) (*model.AccountDTO, error) {
	ret := _m.Called(ctx, req)

	var r0 *model.AccountDTO
	if rf, ok := ret.Get(0).(func(context.Context, request.FindAccountByNameRequest) *model.AccountDTO); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AccountDTO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, request.FindAccountByNameRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, req
func (_m *Account) Update(ctx context.Context, req request.UpdateAccountRequest) (string, error) {
	ret := _m.Called(ctx, req)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, request.UpdateAccountRequest) string); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, request.UpdateAccountRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
