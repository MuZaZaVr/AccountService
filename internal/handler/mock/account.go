// Code generated by mockery v2.8.0. DO NOT EDIT.

package mock

import (
	context "context"

	model "github.com/MuZaZaVr/account-service/internal/model"
	mock "github.com/stretchr/testify/mock"

	request "github.com/MuZaZaVr/account-service/internal/model/request"
)

// Account is an autogenerated mock type for the Account type
type Account struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, req
func (_m *Account) Create(ctx context.Context, req request.CreateAccountRequest) (string, error) {
	ret := _m.Called(ctx, req)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, request.CreateAccountRequest) string); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, request.CreateAccountRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, req
func (_m *Account) Delete(ctx context.Context, req request.DeleteAccountRequest) (string, error) {
	ret := _m.Called(ctx, req)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, request.DeleteAccountRequest) string); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, request.DeleteAccountRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAllByCompanyID provides a mock function with given fields: ctx, req
func (_m *Account) FindAllByCompanyID(ctx context.Context, req request.FindAllAccountsByCompanyIDRequest) ([]model.AccountDTO, error) {
	ret := _m.Called(ctx, req)

	var r0 []model.AccountDTO
	if rf, ok := ret.Get(0).(func(context.Context, request.FindAllAccountsByCompanyIDRequest) []model.AccountDTO); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.AccountDTO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, request.FindAllAccountsByCompanyIDRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAllByUserID provides a mock function with given fields: ctx, req
func (_m *Account) FindAllByUserID(ctx context.Context, req request.FindAllAccountsByUserIDRequest) ([]model.AccountDTO, error) {
	ret := _m.Called(ctx, req)

	var r0 []model.AccountDTO
	if rf, ok := ret.Get(0).(func(context.Context, request.FindAllAccountsByUserIDRequest) []model.AccountDTO); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.AccountDTO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, request.FindAllAccountsByUserIDRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByCredentialEmail provides a mock function with given fields: ctx, req
func (_m *Account) FindByCredentialEmail(ctx context.Context, req request.FindAccountsByCredentialEmailRequest) ([]model.AccountDTO, error) {
	ret := _m.Called(ctx, req)

	var r0 []model.AccountDTO
	if rf, ok := ret.Get(0).(func(context.Context, request.FindAccountsByCredentialEmailRequest) []model.AccountDTO); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.AccountDTO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, request.FindAccountsByCredentialEmailRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByCredentialLogin provides a mock function with given fields: ctx, req
func (_m *Account) FindByCredentialLogin(ctx context.Context, req request.FindAccountsByCredentialLoginRequest) ([]model.AccountDTO, error) {
	ret := _m.Called(ctx, req)

	var r0 []model.AccountDTO
	if rf, ok := ret.Get(0).(func(context.Context, request.FindAccountsByCredentialLoginRequest) []model.AccountDTO); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.AccountDTO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, request.FindAccountsByCredentialLoginRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByCredentialMiddlename provides a mock function with given fields: ctx, req
func (_m *Account) FindByCredentialMiddlename(ctx context.Context, req request.FindAccountsByCredentialMiddlenameRequest) ([]model.AccountDTO, error) {
	ret := _m.Called(ctx, req)

	var r0 []model.AccountDTO
	if rf, ok := ret.Get(0).(func(context.Context, request.FindAccountsByCredentialMiddlenameRequest) []model.AccountDTO); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.AccountDTO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, request.FindAccountsByCredentialMiddlenameRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByCredentialName provides a mock function with given fields: ctx, req
func (_m *Account) FindByCredentialName(ctx context.Context, req request.FindAccountsByCredentialNameRequest) ([]model.AccountDTO, error) {
	ret := _m.Called(ctx, req)

	var r0 []model.AccountDTO
	if rf, ok := ret.Get(0).(func(context.Context, request.FindAccountsByCredentialNameRequest) []model.AccountDTO); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.AccountDTO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, request.FindAccountsByCredentialNameRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByCredentialPhone provides a mock function with given fields: ctx, req
func (_m *Account) FindByCredentialPhone(ctx context.Context, req request.FindAccountsByCredentialPhoneRequest) ([]model.AccountDTO, error) {
	ret := _m.Called(ctx, req)

	var r0 []model.AccountDTO
	if rf, ok := ret.Get(0).(func(context.Context, request.FindAccountsByCredentialPhoneRequest) []model.AccountDTO); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.AccountDTO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, request.FindAccountsByCredentialPhoneRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByCredentialSurname provides a mock function with given fields: ctx, req
func (_m *Account) FindByCredentialSurname(ctx context.Context, req request.FindAccountsByCredentialSurnameRequest) ([]model.AccountDTO, error) {
	ret := _m.Called(ctx, req)

	var r0 []model.AccountDTO
	if rf, ok := ret.Get(0).(func(context.Context, request.FindAccountsByCredentialSurnameRequest) []model.AccountDTO); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.AccountDTO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, request.FindAccountsByCredentialSurnameRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByName provides a mock function with given fields: ctx, req
func (_m *Account) FindByName(ctx context.Context, req request.FindAccountByNameRequest) (*model.AccountDTO, error) {
	ret := _m.Called(ctx, req)

	var r0 *model.AccountDTO
	if rf, ok := ret.Get(0).(func(context.Context, request.FindAccountByNameRequest) *model.AccountDTO); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AccountDTO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, request.FindAccountByNameRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCredentialEmail provides a mock function with given fields: ctx, req
func (_m *Account) UpdateCredentialEmail(ctx context.Context, req request.UpdateAccountCredentialEmailRequest) (string, error) {
	ret := _m.Called(ctx, req)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, request.UpdateAccountCredentialEmailRequest) string); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, request.UpdateAccountCredentialEmailRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCredentialLogin provides a mock function with given fields: ctx, req
func (_m *Account) UpdateCredentialLogin(ctx context.Context, req request.UpdateAccountCredentialLoginRequest) (string, error) {
	ret := _m.Called(ctx, req)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, request.UpdateAccountCredentialLoginRequest) string); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, request.UpdateAccountCredentialLoginRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCredentialMiddlename provides a mock function with given fields: ctx, req
func (_m *Account) UpdateCredentialMiddlename(ctx context.Context, req request.UpdateAccountCredentialMiddlenameRequest) (string, error) {
	ret := _m.Called(ctx, req)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, request.UpdateAccountCredentialMiddlenameRequest) string); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, request.UpdateAccountCredentialMiddlenameRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCredentialName provides a mock function with given fields: ctx, req
func (_m *Account) UpdateCredentialName(ctx context.Context, req request.UpdateAccountCredentialNameRequest) (string, error) {
	ret := _m.Called(ctx, req)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, request.UpdateAccountCredentialNameRequest) string); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, request.UpdateAccountCredentialNameRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCredentialPhone provides a mock function with given fields: ctx, req
func (_m *Account) UpdateCredentialPhone(ctx context.Context, req request.UpdateAccountCredentialPhoneRequest) (string, error) {
	ret := _m.Called(ctx, req)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, request.UpdateAccountCredentialPhoneRequest) string); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, request.UpdateAccountCredentialPhoneRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCredentialSurname provides a mock function with given fields: ctx, req
func (_m *Account) UpdateCredentialSurname(ctx context.Context, req request.UpdateAccountCredentialSurnameRequest) (string, error) {
	ret := _m.Called(ctx, req)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, request.UpdateAccountCredentialSurnameRequest) string); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, request.UpdateAccountCredentialSurnameRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDescription provides a mock function with given fields: ctx, req
func (_m *Account) UpdateDescription(ctx context.Context, req request.UpdateCompanyDescriptionRequest) (string, error) {
	ret := _m.Called(ctx, req)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, request.UpdateCompanyDescriptionRequest) string); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, request.UpdateCompanyDescriptionRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
