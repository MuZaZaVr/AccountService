// Code generated by mockery v2.8.0. DO NOT EDIT.

package mock

import (
	context "context"

	model "github.com/MuZaZaVr/account-service/internal/model"
	mock "github.com/stretchr/testify/mock"

	request "github.com/MuZaZaVr/account-service/internal/model/request"
)

// Credential is an autogenerated mock type for the Credential type
type Credential struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, req
func (_m *Credential) Create(ctx context.Context, req request.CreateCredentialRequest) (string, error) {
	ret := _m.Called(ctx, req)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, request.CreateCredentialRequest) string); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, request.CreateCredentialRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, req
func (_m *Credential) Delete(ctx context.Context, req request.DeleteCredentialRequest) (string, error) {
	ret := _m.Called(ctx, req)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, request.DeleteCredentialRequest) string); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, request.DeleteCredentialRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByEmail provides a mock function with given fields: ctx, req
func (_m *Credential) FindByEmail(ctx context.Context, req request.FindCredentialByEmailRequest) ([]model.CredentialDTO, error) {
	ret := _m.Called(ctx, req)

	var r0 []model.CredentialDTO
	if rf, ok := ret.Get(0).(func(context.Context, request.FindCredentialByEmailRequest) []model.CredentialDTO); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.CredentialDTO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, request.FindCredentialByEmailRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByLogin provides a mock function with given fields: ctx, req
func (_m *Credential) FindByLogin(ctx context.Context, req request.FindCredentialByLoginRequest) ([]model.CredentialDTO, error) {
	ret := _m.Called(ctx, req)

	var r0 []model.CredentialDTO
	if rf, ok := ret.Get(0).(func(context.Context, request.FindCredentialByLoginRequest) []model.CredentialDTO); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.CredentialDTO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, request.FindCredentialByLoginRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByMiddleName provides a mock function with given fields: ctx, req
func (_m *Credential) FindByMiddleName(ctx context.Context, req request.FindCredentialByMiddlenameRequest) ([]model.CredentialDTO, error) {
	ret := _m.Called(ctx, req)

	var r0 []model.CredentialDTO
	if rf, ok := ret.Get(0).(func(context.Context, request.FindCredentialByMiddlenameRequest) []model.CredentialDTO); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.CredentialDTO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, request.FindCredentialByMiddlenameRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByName provides a mock function with given fields: ctx, req
func (_m *Credential) FindByName(ctx context.Context, req request.FindCredentialByNameRequest) ([]model.CredentialDTO, error) {
	ret := _m.Called(ctx, req)

	var r0 []model.CredentialDTO
	if rf, ok := ret.Get(0).(func(context.Context, request.FindCredentialByNameRequest) []model.CredentialDTO); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.CredentialDTO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, request.FindCredentialByNameRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByPhone provides a mock function with given fields: ctx, req
func (_m *Credential) FindByPhone(ctx context.Context, req request.FindCredentialByPhoneRequest) ([]model.CredentialDTO, error) {
	ret := _m.Called(ctx, req)

	var r0 []model.CredentialDTO
	if rf, ok := ret.Get(0).(func(context.Context, request.FindCredentialByPhoneRequest) []model.CredentialDTO); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.CredentialDTO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, request.FindCredentialByPhoneRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindBySurname provides a mock function with given fields: ctx, req
func (_m *Credential) FindBySurname(ctx context.Context, req request.FindCredentialBySurnameRequest) ([]model.CredentialDTO, error) {
	ret := _m.Called(ctx, req)

	var r0 []model.CredentialDTO
	if rf, ok := ret.Get(0).(func(context.Context, request.FindCredentialBySurnameRequest) []model.CredentialDTO); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.CredentialDTO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, request.FindCredentialBySurnameRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateEmail provides a mock function with given fields: ctx, req
func (_m *Credential) UpdateEmail(ctx context.Context, req request.UpdateCredentialEmailRequest) (string, error) {
	ret := _m.Called(ctx, req)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, request.UpdateCredentialEmailRequest) string); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, request.UpdateCredentialEmailRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateLogin provides a mock function with given fields: ctx, req
func (_m *Credential) UpdateLogin(ctx context.Context, req request.UpdateCredentialLoginRequest) (string, error) {
	ret := _m.Called(ctx, req)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, request.UpdateCredentialLoginRequest) string); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, request.UpdateCredentialLoginRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMiddleName provides a mock function with given fields: ctx, req
func (_m *Credential) UpdateMiddleName(ctx context.Context, req request.UpdateCredentialMiddlenameRequest) (string, error) {
	ret := _m.Called(ctx, req)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, request.UpdateCredentialMiddlenameRequest) string); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, request.UpdateCredentialMiddlenameRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateName provides a mock function with given fields: ctx, req
func (_m *Credential) UpdateName(ctx context.Context, req request.UpdateCredentialNameRequest) (string, error) {
	ret := _m.Called(ctx, req)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, request.UpdateCredentialNameRequest) string); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, request.UpdateCredentialNameRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePhone provides a mock function with given fields: ctx, req
func (_m *Credential) UpdatePhone(ctx context.Context, req request.UpdateCredentialPhoneRequest) (string, error) {
	ret := _m.Called(ctx, req)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, request.UpdateCredentialPhoneRequest) string); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, request.UpdateCredentialPhoneRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSurname provides a mock function with given fields: ctx, req
func (_m *Credential) UpdateSurname(ctx context.Context, req request.UpdateCredentialSurnameRequest) (string, error) {
	ret := _m.Called(ctx, req)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, request.UpdateCredentialSurnameRequest) string); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, request.UpdateCredentialSurnameRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
