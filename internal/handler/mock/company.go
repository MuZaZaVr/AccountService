// Code generated by mockery v2.8.0. DO NOT EDIT.

package mock

import (
	context "context"

	model "github.com/MuZaZaVr/account-service/internal/model"
	mock "github.com/stretchr/testify/mock"

	request "github.com/MuZaZaVr/account-service/internal/model/request"
)

// Company is an autogenerated mock type for the Company type
type Company struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, req
func (_m *Company) Create(ctx context.Context, req request.CreateCompanyRequest) (string, error) {
	ret := _m.Called(ctx, req)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, request.CreateCompanyRequest) string); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, request.CreateCompanyRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, req
func (_m *Company) Delete(ctx context.Context, req request.DeleteCompanyRequest) (string, error) {
	ret := _m.Called(ctx, req)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, request.DeleteCompanyRequest) string); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, request.DeleteCompanyRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByName provides a mock function with given fields: ctx, req
func (_m *Company) FindByName(ctx context.Context, req request.FindCompanyByNameRequest) (*model.CompanyDTO, error) {
	ret := _m.Called(ctx, req)

	var r0 *model.CompanyDTO
	if rf, ok := ret.Get(0).(func(context.Context, request.FindCompanyByNameRequest) *model.CompanyDTO); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.CompanyDTO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, request.FindCompanyByNameRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByURL provides a mock function with given fields: ctx, req
func (_m *Company) FindByURL(ctx context.Context, req request.FindCompanyByURLRequest) (*model.CompanyDTO, error) {
	ret := _m.Called(ctx, req)

	var r0 *model.CompanyDTO
	if rf, ok := ret.Get(0).(func(context.Context, request.FindCompanyByURLRequest) *model.CompanyDTO); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.CompanyDTO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, request.FindCompanyByURLRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsExist provides a mock function with given fields: ctx, req
func (_m *Company) IsExist(ctx context.Context, req request.IsCompanyExistRequest) (bool, error) {
	ret := _m.Called(ctx, req)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, request.IsCompanyExistRequest) bool); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, request.IsCompanyExistRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDescription provides a mock function with given fields: ctx, req
func (_m *Company) UpdateDescription(ctx context.Context, req request.UpdateCompanyDescriptionRequest) (string, error) {
	ret := _m.Called(ctx, req)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, request.UpdateCompanyDescriptionRequest) string); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, request.UpdateCompanyDescriptionRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateName provides a mock function with given fields: ctx, req
func (_m *Company) UpdateName(ctx context.Context, req request.UpdateCompanyNameRequest) (string, error) {
	ret := _m.Called(ctx, req)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, request.UpdateCompanyNameRequest) string); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, request.UpdateCompanyNameRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateURL provides a mock function with given fields: ctx, req
func (_m *Company) UpdateURL(ctx context.Context, req request.UpdateCompanyURLRequest) (string, error) {
	ret := _m.Called(ctx, req)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, request.UpdateCompanyURLRequest) string); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, request.UpdateCompanyURLRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
