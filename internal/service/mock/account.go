// Code generated by mockery v2.8.0. DO NOT EDIT.

package mock

import (
	context "context"

	model "github.com/MuZaZaVr/account-service/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// Account is an autogenerated mock type for the Account type
type Account struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, account
func (_m *Account) Create(ctx context.Context, account model.AccountDTO) (string, error) {
	ret := _m.Called(ctx, account)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, model.AccountDTO) string); ok {
		r0 = rf(ctx, account)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.AccountDTO) error); ok {
		r1 = rf(ctx, account)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, id
func (_m *Account) Delete(ctx context.Context, id string) (string, error) {
	ret := _m.Called(ctx, id)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAllByCompanyID provides a mock function with given fields: ctx, id
func (_m *Account) FindAllByCompanyID(ctx context.Context, id string) ([]model.AccountDTO, error) {
	ret := _m.Called(ctx, id)

	var r0 []model.AccountDTO
	if rf, ok := ret.Get(0).(func(context.Context, string) []model.AccountDTO); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.AccountDTO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAllByUserID provides a mock function with given fields: ctx, id
func (_m *Account) FindAllByUserID(ctx context.Context, id int) ([]model.AccountDTO, error) {
	ret := _m.Called(ctx, id)

	var r0 []model.AccountDTO
	if rf, ok := ret.Get(0).(func(context.Context, int) []model.AccountDTO); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.AccountDTO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByCredentialID provides a mock function with given fields: ctx, id
func (_m *Account) FindByCredentialID(ctx context.Context, id string) (*model.AccountDTO, error) {
	ret := _m.Called(ctx, id)

	var r0 *model.AccountDTO
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.AccountDTO); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AccountDTO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByName provides a mock function with given fields: ctx, name
func (_m *Account) FindByName(ctx context.Context, name string) (*model.AccountDTO, error) {
	ret := _m.Called(ctx, name)

	var r0 *model.AccountDTO
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.AccountDTO); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AccountDTO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindCredentialIDByAccountID provides a mock function with given fields: ctx, id
func (_m *Account) FindCredentialIDByAccountID(ctx context.Context, id string) (string, error) {
	ret := _m.Called(ctx, id)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsExist provides a mock function with given fields: ctx, name
func (_m *Account) IsExist(ctx context.Context, name string) (bool, error) {
	ret := _m.Called(ctx, name)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCompanyID provides a mock function with given fields: ctx, id, newCompanyId
func (_m *Account) UpdateCompanyID(ctx context.Context, id string, newCompanyId string) (string, error) {
	ret := _m.Called(ctx, id, newCompanyId)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, id, newCompanyId)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, id, newCompanyId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDescription provides a mock function with given fields: ctx, id, newDescription
func (_m *Account) UpdateDescription(ctx context.Context, id string, newDescription string) (string, error) {
	ret := _m.Called(ctx, id, newDescription)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, id, newDescription)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, id, newDescription)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateName provides a mock function with given fields: ctx, id, newName
func (_m *Account) UpdateName(ctx context.Context, id string, newName string) (string, error) {
	ret := _m.Called(ctx, id, newName)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, id, newName)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, id, newName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
