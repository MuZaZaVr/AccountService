// Code generated by mockery v2.8.0. DO NOT EDIT.

package mock

import (
	context "context"

	model "github.com/MuZaZaVr/account-service/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// Credential is an autogenerated mock type for the Credential type
type Credential struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, credential
func (_m *Credential) Create(ctx context.Context, credential model.CredentialDTO) (string, error) {
	ret := _m.Called(ctx, credential)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, model.CredentialDTO) string); ok {
		r0 = rf(ctx, credential)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.CredentialDTO) error); ok {
		r1 = rf(ctx, credential)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, id
func (_m *Credential) Delete(ctx context.Context, id string) (string, error) {
	ret := _m.Called(ctx, id)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByEmail provides a mock function with given fields: ctx, email
func (_m *Credential) FindByEmail(ctx context.Context, email string) ([]model.CredentialDTO, error) {
	ret := _m.Called(ctx, email)

	var r0 []model.CredentialDTO
	if rf, ok := ret.Get(0).(func(context.Context, string) []model.CredentialDTO); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.CredentialDTO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByLogin provides a mock function with given fields: ctx, login
func (_m *Credential) FindByLogin(ctx context.Context, login string) ([]model.CredentialDTO, error) {
	ret := _m.Called(ctx, login)

	var r0 []model.CredentialDTO
	if rf, ok := ret.Get(0).(func(context.Context, string) []model.CredentialDTO); ok {
		r0 = rf(ctx, login)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.CredentialDTO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, login)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByMiddleName provides a mock function with given fields: ctx, middlename
func (_m *Credential) FindByMiddleName(ctx context.Context, middlename string) ([]model.CredentialDTO, error) {
	ret := _m.Called(ctx, middlename)

	var r0 []model.CredentialDTO
	if rf, ok := ret.Get(0).(func(context.Context, string) []model.CredentialDTO); ok {
		r0 = rf(ctx, middlename)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.CredentialDTO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, middlename)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByName provides a mock function with given fields: ctx, name
func (_m *Credential) FindByName(ctx context.Context, name string) ([]model.CredentialDTO, error) {
	ret := _m.Called(ctx, name)

	var r0 []model.CredentialDTO
	if rf, ok := ret.Get(0).(func(context.Context, string) []model.CredentialDTO); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.CredentialDTO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByPhone provides a mock function with given fields: ctx, phone
func (_m *Credential) FindByPhone(ctx context.Context, phone string) ([]model.CredentialDTO, error) {
	ret := _m.Called(ctx, phone)

	var r0 []model.CredentialDTO
	if rf, ok := ret.Get(0).(func(context.Context, string) []model.CredentialDTO); ok {
		r0 = rf(ctx, phone)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.CredentialDTO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, phone)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindBySurname provides a mock function with given fields: ctx, surname
func (_m *Credential) FindBySurname(ctx context.Context, surname string) ([]model.CredentialDTO, error) {
	ret := _m.Called(ctx, surname)

	var r0 []model.CredentialDTO
	if rf, ok := ret.Get(0).(func(context.Context, string) []model.CredentialDTO); ok {
		r0 = rf(ctx, surname)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.CredentialDTO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, surname)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateEmail provides a mock function with given fields: ctx, id, newEmail
func (_m *Credential) UpdateEmail(ctx context.Context, id string, newEmail string) (string, error) {
	ret := _m.Called(ctx, id, newEmail)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, id, newEmail)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, id, newEmail)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateLogin provides a mock function with given fields: ctx, id, newLogin
func (_m *Credential) UpdateLogin(ctx context.Context, id string, newLogin string) (string, error) {
	ret := _m.Called(ctx, id, newLogin)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, id, newLogin)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, id, newLogin)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMiddleName provides a mock function with given fields: ctx, id, newMiddlename
func (_m *Credential) UpdateMiddleName(ctx context.Context, id string, newMiddlename string) (string, error) {
	ret := _m.Called(ctx, id, newMiddlename)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, id, newMiddlename)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, id, newMiddlename)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateName provides a mock function with given fields: ctx, id, newName
func (_m *Credential) UpdateName(ctx context.Context, id string, newName string) (string, error) {
	ret := _m.Called(ctx, id, newName)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, id, newName)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, id, newName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePhone provides a mock function with given fields: ctx, id, newPhone
func (_m *Credential) UpdatePhone(ctx context.Context, id string, newPhone string) (string, error) {
	ret := _m.Called(ctx, id, newPhone)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, id, newPhone)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, id, newPhone)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSurname provides a mock function with given fields: ctx, id, newSurname
func (_m *Credential) UpdateSurname(ctx context.Context, id string, newSurname string) (string, error) {
	ret := _m.Called(ctx, id, newSurname)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, id, newSurname)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, id, newSurname)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
